{% if mapJSHelper and apiHelper -%}

    <script src="https://www.gstatic.com/charts/loader.js"></script>
    <script>
        google.charts.load('current', {packages: ['map']});
    </script>

    {{ mapJSHelper | raw }}
    {{ apiHelper | replace({'ivory_google_map_init_source("https://www.google.com/jsapi?callback=ivory_google_map_load");': 'google.charts.setOnLoadCallback(ivory_google_map_load);'}) | raw }}

    {% if searchEngine and mapJsVariable and clustererJSVariable -%}
        <script type="text/javascript">
            var windowWidth = $(window).width();
            var canvasWidth = 0;
            var infoWindow = null;
            var itemIds = [];

            clusterClick = function (cluster) {
                var markers = cluster.getMarkers();

                if (markers) {
                    var position = markers[0].position;
                    var match = true;
                    var elements = [markers[0].itemElement];

                    for (var i = 1; i < markers.length && match; i++) {
                        var marker = markers[i];

                        if (match = position.equals(marker.position)) {
                            elements.push(marker.itemElement);
                        }
                    }

                    if (match) {
                        viewElement(elements, markers[0]);
                    }
                }
            };

            /**
             *
             * @param {Array | string} data
             * @param element
             */
            displayResults = function (data, element) {
                if (data.constructor !== Array) {
                    /* Closes previous windows opened */
                    if (this.infoWindow) {
                        this.infoWindow.close();
                    }

                    this.infoWindow = new google.maps.InfoWindow({
                        content: data,
                        maxWidth: this.canvasWidth
                    });

                    this.infoWindow.open(this.map, element);
                }
            };

            /**
             * Shows info about the clicked item on the map
             * @param data
             * @param element {Object}
             */
            viewElement = function (data, element) {
                if (data.constructor !== Array) {
                    data = [data];
                }

                $.ajaxSetup({
                    headers: {'X-Robots-Tag': 'noindex'}
                });

                $.post("{{ path("search_map_summary")|raw }}",{data: data}).done(function (response) {
                    displayResults(response, element);
                });
            };

            window.onload = function() {
                if(windowWidth <= 425){
                    this.canvasWidth = $("#map_canvas").width() - 60;
                } else if(windowWidth > 425 && windowWidth <= 768){
                    this.canvasWidth = 600;
                } else if(windowWidth >= 992){
                    this.canvasWidth = 800;
                }
            };

            updateMap = function (map) {
                var boundsMap = map.getBounds();

                bounds = {};
                bounds.lat = {};
                bounds.lng = {};
                bounds.lat.sw = 20.819274033035082;
                bounds.lat.ne = 52.923140180124804;
                bounds.lng.sw = -33.60962163750003;
                bounds.lng.ne = -159.20532476250003;

                if (typeof boundsMap != "undefined") {
                    var ne = boundsMap.getNorthEast();
                    var sw = boundsMap.getSouthWest();

                    bounds.lat.sw = sw.lat();
                    bounds.lat.ne = ne.lat();
                    bounds.lng.sw = sw.lng();
                    bounds.lng.ne = ne.lng();
                }

                $.post("{{ path('tailoredmaplisting_geobound')|raw }}", {
                    'bottom_right[]': [bounds.lat.sw, bounds.lng.ne],
                    'top_left[]': [bounds.lat.ne, bounds.lng.sw],
                    'item_ids': itemIds
                }, function (response) {
                    if (response.length > 0) {
                        setMarkers(response);
                    }
                });

                setTimeout(clearMarkers(), 3000);
            };

            clearMarkers = function () {
                for (var markerId in {{ mapJsVariable }}_container.markers) {
                    if (!{{ mapJsVariable }}.getBounds().contains({{ mapJsVariable }}_container.markers[markerId].getPosition())) {
                        {{ mapJsVariable }}_container.markers[markerId].setMap(null);
                        {{ mapJsVariable }}_container.markers[markerId].setTitle('hidden_marker');
                    } else {
                        if ({{ mapJsVariable }}_container.markers[markerId].getTitle() == 'hidden_marker') {
                            {{ mapJsVariable }}_container.markers[markerId].setMap({{ mapJsVariable }});
                            {{ mapJsVariable }}_container.markers[markerId].setTitle(null);
                        }
                    }
                }
            };

            setMarkers = function (response) {
                var markers = [];
                for (var i = 0; i < response.length; i++) {
                    var cleanId = true;
                    if (itemIds.length > 0) {
                        for (var key in itemIds) {
                            if (itemIds[key] == response[i]['itemId']) {
                                cleanId = false;
                            }
                        }
                    }
                    if (cleanId) {
                        marker = new google.maps.Marker({
                            position: new google.maps.LatLng(response[i].geoLocation.lat, response[i].geoLocation.lon),
                            icon: response[i].icon,
                            map: {{ mapJsVariable }},
                            clickable: true,
                            flat: true,
                            zIndex: response[i].zIndex,
                            itemElement: response[i].itemElement,
                            itemId: response[i]['itemId'],
                        });
                        google.maps.event.addListener(marker, 'click', function () {
                            viewElement(this.itemElement, this);
                        });
                        markers.push(marker);
                        itemIds.push(response[i]['itemId']);
                    }
                }
                {{ clustererJSVariable }}.addMarkers(markers);
            };

            idle = function () {
                updateMap({{ mapJsVariable }});
            };
        </script>
    {% endif %}
{% endif %}
