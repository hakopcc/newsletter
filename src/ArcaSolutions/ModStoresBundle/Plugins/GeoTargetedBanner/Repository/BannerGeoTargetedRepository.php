<?php

namespace ArcaSolutions\ModStoresBundle\Plugins\GeoTargetedBanner\Repository;

use ArcaSolutions\ApiBundle\Helper\CategoryHelper;
use ArcaSolutions\BannersBundle\Entity\Banner;
use ArcaSolutions\BannersBundle\Entity\Bannerlevel;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\Query\Expr\Join;

/**
 * BannerGeoTargetedRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BannerGeoTargetedRepository extends EntityRepository
{
    /**
     * Description
     *
     * @param Bannerlevel $level
     * @param array|null $categorizedSections
     * @return Banner|null
     * @throws NonUniqueResultException
     */
    public function getBanner($level, $categorizedSections = [])
    {
        static $usedBanners = [];

        $geolocation = isset($categorizedSections['geolocation']) ? $categorizedSections['geolocation'] : [];
        $categorizedSections = isset($categorizedSections['sections']) ? $categorizedSections['sections'] : [];

        $categorizedSections or $categorizedSections['general'] = null;

        if (!$level) {
            return null;
        }
        
        $em = $this->getEntityManager();
        $bannerRepository = $em->getRepository('BannersBundle:Banner');
        $qb = $bannerRepository->createQueryBuilder('b');
        $qb->leftJoin($this->getClassName(), 'geo', Join::WITH, 'b.id = geo.id');
        
        $mainConditional = $qb->expr()->andX();

        $expirationCondition = $qb->expr()->orX()->addMultiple([
            $qb->expr()->gte('b.renewalDate', 'CURRENT_DATE()'),
            $qb->expr()->eq('b.renewalDate', "'0000-00-00 00:00:00'"),
            $qb->expr()->isNull('b.renewalDate'),
        ]);

        $mainConditional->add(
            $qb->expr()->orX()->addMultiple([
                $expirationCondition,
            ])
        );

        if ($categorizedSections) {
            $condSection = $qb->expr()->orX();
            $condSection->add($qb->expr()->eq('b.section', "'global'"));

            $j = 0;

            foreach ($categorizedSections as $section => $categoryIds) {
                if (!$section || $section == 'general') {
                    $condSection->add($qb->expr()->eq('b.section', "'general'"));
                    break;
                }

                $section == 'deal' and $section = 'promotion';

                $repository = $this->getEntityManager()
                    ->getRepository(CategoryHelper::getRepositoryNameByModule($section));

                $categories = $repository->findBy(['id' => $categoryIds]);

                foreach ($categories as $category) {
                    $aux = clone $category;
                    while ($parent = $aux->getParent()) {
                        $categoryIds[] = $parent->getId();
                        $aux = $parent;
                    }
                }

                if (is_array($categoryIds)) {
                    $categoryIds[] = 0;
                } else {
                    $categoryIds = [0];
                }

                $condSection->add(
                    $qb->expr()->andX()->addMultiple([
                        $qb->expr()->eq('b.section', "'{$section}'"),
                        $qb->expr()->in('b.categoryId', ":category{$j}"),
                    ])
                );

                $qb->setParameter("category{$j}", (array)$categoryIds);

                $j++;
            }
        } else {
            $condSection = $qb->expr()->eq('b.section', ':global');
        }

        $mainConditional->add($condSection);

        if ($usedBanners) {
            $mainConditional->add($qb->expr()->notIn('b.id', ':ids'));
            $qb->setParameter('ids', array_keys($usedBanners));
        }

        $mainConditional->addMultiple([
            $qb->expr()->eq('b.status', "'A'"),
            $qb->expr()->eq('b.type', $level->getValue()),
        ]);

        $qb->where($mainConditional);

        /**
         * DISTANCE EQUATION:
         * FLOOR(acos(
         * (
         * sin({$origin_lat}) * sin(geo.lat)
         * ) + (
         * cos({$origin_lat}) * cos(geo.lat) * cos( ({$origin_lng} - geo.lng) )
         * )
         * )*111) as distance
         **/

        if (
            isset($geolocation['distanceMax']) &&
            isset($geolocation['latitude']) &&
            isset($geolocation['longitude'])
        ) {

            $orUseSettingsDistance = $qb->expr()->andX();
            $orUseSettingsDistance->add($qb->expr()->isNull('geo_distance'));
            $orUseSettingsDistance->add($qb->expr()->lt('distance', ':settingsDistance'));

            $orNullLatLonBanner = $qb->expr()->andX();
            $orNullLatLonBanner->add($qb->expr()->isNull('geo_latitude'));
            $orNullLatLonBanner->add($qb->expr()->isNull('geo_longitude'));

            $havingDistanceSet = $qb->expr()->orX();
            $havingDistanceSet->add($orUseSettingsDistance);
            $havingDistanceSet->add($orNullLatLonBanner);
            $havingDistanceSet->add($qb->expr()->lt('distance', 'geo_distance'));

            $banner = $qb->addSelect("geo.distance as HIDDEN geo_distance,
                        geo.latitude as HIDDEN geo_latitude,
                        geo.longitude as HIDDEN geo_longitude,
                        RAND() as HIDDEN rand,
                        ROUND(3959 * acos( cos( radians({$geolocation['latitude']}) )
                               * cos( radians(IFNULL(geo.latitude,{$geolocation['latitude']})) )
                               * cos( radians(IFNULL(geo.longitude,{$geolocation['longitude']})) - radians({$geolocation['longitude']})) + sin(radians({$geolocation['latitude']}))
                               * sin( radians(IFNULL(geo.latitude,{$geolocation['latitude']})))
                        ), 3) as HIDDEN distance
                    ")
                ->setMaxResults(1)
                ->orderBy('rand', 'ASC')
                ->having($havingDistanceSet)
                ->setParameter('settingsDistance', $geolocation['distanceMax'])
                ->getQuery();

        } else {

            $banner = $qb->addSelect('RAND() as HIDDEN rand')
                ->setMaxResults(1)
                ->orderBy('rand')
                ->getQuery();

        }

        if ($return = $banner->getOneOrNullResult()) {
            /* @var $return Banner */
            $usedBanners[$return->getId()] = true;
        }

        return $return;
    }
}
