<?php

namespace ArcaSolutions\WebBundle\Repository;

use ArcaSolutions\WebBundle\Entity\BaseCategory;
use ArcaSolutions\WebBundle\Interfaces\BaseCategoryRepositoryInterface;
use Doctrine\ORM\EntityRepository;

/**
 * BaseModule
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseCategoryRepository extends EntityRepository implements BaseCategoryRepositoryInterface
{

    /**
     * @var int Default 20
     */
    protected $max_items;

    /**
     * {@inheritdoc}
     */
    public function getParentCategories($featured = true)
    {
        $q = $this->createQueryBuilder('q')
            ->where('q.categoryId IS NULL')
            ->andWhere('q.featured = :featured')
            ->andWhere('q.enabled = :enabled')
            ->setParameter('featured', $featured ? 'y' : 'n')
            ->setParameter('enabled', 'y')
            ->orderBy('q.title', 'ASC');

        if (is_int($this->max_items)) {
            $q->setMaxResults($this->max_items);
        }

        return $q->getQuery()->getResult();
    }

    /**
     * @return mixed
     */
    public function getAllParent()
    {
        return $this->createQueryBuilder('c')
            ->where('c.categoryId IS  NULL')
            ->andWhere('c.enabled = :enabled')
            ->setParameter(':enabled', 'y')
            ->getQuery()
            ->getResult();
    }

    /**
     * Get the list of categories with all children, following the deepth level passed by param
     * @param int|null $parentId Represents the link(category_id)
     * @param int $deepthLevel How deep you want the hierarchy
     * @param int $level It is for internal use
     * @param array $categoriesArray
     * @return array
     */
    public function getHierarchyCategories($parentId = null, $deepthLevel = -1, $level = 0, &$categoriesArray = [])
    {
        if ($deepthLevel > -1 && ($level > $deepthLevel)) {
            return;
        }

        $categories = $this->createQueryBuilder('c')
            ->orderBy('c.title', 'ASC')
            ->where('c.enabled = :enabled')
            ->setParameter(':enabled', 'y');

        if (is_int($parentId) and 0 !== $parentId) {
            $categories->andWhere('c.categoryId = :category')
                ->setParameter('category', $parentId);
        } else {
            $categories->andWhere('c.categoryId IS NULL');
        }

        $categoriesArray[] = $categories->getQuery()->getResult();

        $level++;
        foreach ($categories as &$category) {
            $this->getHierarchyCategories($category->getId(), $deepthLevel, $level, $categoriesArray);
        }

        return $categoriesArray;
    }

    /**
     * Returns the quantity of categories
     * @return int
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getCategoriesCount()
    {
        return $this->createQueryBuilder('c')
            ->select('count(c.id)')
            ->where('c.enabled = :enabled')
            ->setParameter(':enabled', 'y')
            ->getQuery()
            ->getSingleScalarResult();
    }


    /**
     * Returns the quantity of featured categories
     * @return int
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getCategoriesFeaturedCount()
    {
        return $this->createQueryBuilder('c')
            ->select('count(c.id)')
            ->andWhere('c.featured = :featured')
            ->andWhere('c.enabled = :enabled')
            ->setParameter(':enabled', 'y')
            ->setParameter(':featured', 'y')
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @return mixed
     */
    public function getMaxItems()
    {
        return $this->max_items;
    }

    /**
     * @param mixed $max_items
     */
    public function setMaxItems($max_items)
    {
        if (is_int($max_items)) {
            $this->max_items = $max_items;
        }
    }

    /**
     * @param $term
     * @return BaseCategory[]
     */
    public function searchByTitle($term)
    {
        return $this->createQueryBuilder('c')
            ->select('c')
            ->where('c.title LIKE :term')
            ->setParameter(':term', '%' . $term . '%')
            ->getQuery()
            ->getResult();
    }
}
