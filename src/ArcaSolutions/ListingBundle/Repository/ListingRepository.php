<?php

namespace ArcaSolutions\ListingBundle\Repository;

use ArcaSolutions\CoreBundle\Interfaces\EntityModulesRowInterface;
use ArcaSolutions\CoreBundle\Repository\EntityModulesRowRepository;
use Doctrine\ORM\Mapping\PostPersist;
use Doctrine\ORM\Mapping\PostUpdate;
use Doctrine\ORM\Mapping\PreRemove;
use Doctrine\ORM\Query\Expr;

/**
 * ListingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
final class ListingRepository extends EntityModulesRowRepository
{
    /**
     * Returns module name in lowercase
     *
     * @return string
     */
    function getModuleName()
    {
        return 'listing';
    }

    /**
     * Return a valid classified associated listing if Listing is active and Listing level classified quantity association is bigger than 0
     *
     * @param $listingId
     * @return array
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getClassifiedAssociatedListing($listingId)
    {
        $qb = $this->createQueryBuilder('l')
            ->select('l')
            ->join('ListingBundle:ListingLevelField', 'llf', 'WITH', 'l.level = llf.level')
            ->where('l.id = :id')
            ->andWhere('llf.field = :field')
            ->andWhere('llf.quantity > 0')
            ->andWhere('l.status = :status')
            ->setParameter('id', $listingId)
            ->setParameter('status', 'A')
            ->setParameter('field', 'classifieds');

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param null $limit
     * @param null $accountId
     * @return array
     */
    public function getOrderedListings($limit = null, $accountId = null)
    {
        $qb = $this->createQueryBuilder('l')
            ->select('l');

        if(!empty($accountId)) {
            $qb->where('l.accountId = :accountId')
                ->andWhere('l.status = :status')
                ->setParameter('accountId', $accountId)
                ->setParameter('status', 'A');
        }

        if(!empty($limit)) {
            $qb->setMaxResults($limit);
        }

        $qb->orderBy('l.title','ASC');

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * @param null $limit
     * @param null $accountId
     * @param null $term
     * @return array
     */
    public function getOrderedListingsByTerm($limit = null, $accountId = null, $term = null)
    {
        $qb = $this->createQueryBuilder('l')
            ->select('l');

        if(!empty($accountId)) {
            $qb->where('l.accountId = :accountId')
                ->andWhere('l.status = :status')
                ->setParameter('accountId', $accountId)
                ->setParameter('status', 'A');

            if(!empty($term)) {
                $qb->andWhere($qb->expr()->like('l.title', ':title'))
                    ->setParameter('title', '%' . $term . '%');
            }
        } elseif(!empty($term)) {
            $qb->where($qb->expr()->like('l.title', ':title'))
                ->setParameter('title', '%' . $term . '%');
        }

        if(!empty($limit)) {
            $qb->setMaxResults($limit);
        }

        $qb->orderBy('l.title','ASC');

        return $qb->getQuery()->getArrayResult();
    }
}
